{"version":3,"file":"RootErrorBoundary.js","sourceRoot":"","sources":["../../src/launch/RootErrorBoundary.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { NativeModules, StyleSheet, Text, View } from 'react-native';\n\nimport { getAppLoadingLifecycleEmitter } from './AppLoading';\n\nconst { ExponentAppLoadingManager } = NativeModules;\n\nasync function finishedAsync(): Promise<any> {\n  if (ExponentAppLoadingManager && ExponentAppLoadingManager.finishedAsync) {\n    return await ExponentAppLoadingManager.finishedAsync();\n  }\n}\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype State = {\n  error: Error | null;\n};\n\n// Store this outside of the component so it is available inside getDerivedStateFromError\nlet _appLoadingIsMounted: boolean;\n\n/**\n * This component is never rendered in production!\n *\n * In production the app will just hard crash on errors, unless the developer decides to handle\n * them by overriding the global error handler and swallowing the error, in which case they are\n * responsible for determining how to recover from this state.\n *\n * - The sole purpose of this component is to hide the splash screen if an error\n * occurs that prevents it from being hidden. Please note that this currently only works\n * with <AppLoading /> and not SplashScreen.preventAutoHide()!\n * - On iOS the splash screen hides itself, but we provide a uniform error screen with Android.\n * - On Android it is necessary for us to render some content in order to hide the splash screen,\n * just calling `ExponentAppLoadingManager.finishedAsync()` is not sufficient.\n *\n */\nexport default class RootErrorBoundary extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    _appLoadingIsMounted = false;\n    getAppLoadingLifecycleEmitter().once('componentDidMount', this._subscribeToGlobalErrors);\n    getAppLoadingLifecycleEmitter().once('componentWillUnmount', this._unsubscribeFromGlobalErrors);\n\n    this.state = {\n      error: null,\n    };\n  }\n\n  /**\n   * Test this by adding `throw new Error('example')` to your root component\n   * when the AppLoading component is rendered.\n   */\n  static getDerivedStateFromError(_error: Error) {\n    if (_appLoadingIsMounted) {\n      return { error: true };\n    }\n\n    return null;\n  }\n\n  componentDidCatch(_error: Error, _errorInfo: any) {\n    if (_appLoadingIsMounted) {\n      finishedAsync();\n    }\n  }\n\n  _subscribeToGlobalErrors = () => {\n    _appLoadingIsMounted = true;\n\n    const originalErrorHandler = ErrorUtils.getGlobalHandler();\n\n    ErrorUtils.setGlobalHandler((error, isFatal) => {\n      if (_appLoadingIsMounted) {\n        finishedAsync();\n\n        if (isFatal) {\n          this.setState({ error });\n        }\n      }\n\n      originalErrorHandler(error, isFatal);\n    });\n  };\n\n  _unsubscribeFromGlobalErrors = () => {\n    // We don't remove the global error handler that we set here because it is conceivable that the\n    // user may add error handlers *after* we subscribe, and we don't want to override those, so\n    // instead we just gate the call\n    _appLoadingIsMounted = false;\n  };\n\n  render() {\n    if (this.state.error) {\n      return (\n        <View style={styles.container}>\n          <Text style={styles.warningIcon}>⚠️</Text>\n          <Text style={[styles.paragraph, { color: '#000' }]}>\n            You are seeing this screen because a fatal error was encountered before the splash\n            screen was hidden.\n          </Text>\n          <Text style={styles.paragraph}>\n            Review your application logs for more information, then come back and reload this app\n            when you are ready. In production, your app would have crashed and closed.\n          </Text>\n        </View>\n      );\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paragraph: {\n    marginBottom: 10,\n    textAlign: 'center',\n    marginHorizontal: 30,\n    maxWidth: 350,\n    fontSize: 15,\n    color: '#888',\n  },\n  warningIcon: {\n    fontSize: 40,\n    marginBottom: 20,\n  },\n});\n"]}